import { LightningElement, track } from 'lwc';
import { loadScript, loadStyle } from 'lightning/platformResourceLoader';
import FullCalendarJS from '@salesforce/resourceUrl/FullCalendarJS';
import { NavigationMixin } from 'lightning/navigation';
import fetchAllEvents from '@salesforce/apex/FullCalendarService.fetchAllEvents';
/**
 * FullCalendarJs
 * @description Full Calendar JS - Lightning Web Components
 */
export default class FullCalendarJs extends NavigationMixin(LightningElement) {
  roomtypeval = 'All';
  roomtypechange = 'false';
	get options() {
		return [
				{ label: 'All', value: 'All' },
				{ label: 'Chamber Room', value: 'Chamber Room' },
				{ label: 'Hall', value: 'Hall' },
				{ label: 'Youth Room', value: 'Youth Room' }
		];
	}

	handleChange(event) {
		this.roomtypeval = event.detail.value;
		this.roomtypechange = 'true';
	  this.getAllEvents();
	}
  fullCalendarJsInitialised = false;
  @track allEvents = [];
  @track selectedEvent = undefined;
  /**
   * @description Standard lifecyle method 'renderedCallback'
   *              Ensures that the page loads and renders the 
   *              container before doing anything else
   */
  renderedCallback() {

    // Performs this operation only on first render
    if (this.fullCalendarJsInitialised) {
      return;
    }
    this.fullCalendarJsInitialised = true;

    // Executes all loadScript and loadStyle promises
    // and only resolves them once all promises are done
    Promise.all([
      loadScript(this, FullCalendarJS + '/jquery.min.js'),
      loadScript(this, FullCalendarJS + '/moment.min.js'),
      //loadScript(this, FullCalendarJS + '/theme.js'),
      loadScript(this, FullCalendarJS + '/fullcalendar.min.js'),
      loadStyle(this, FullCalendarJS + '/fullcalendar.min.css'),
      //loadStyle(this, FullCalendarJS + '/fullcalendar.print.min.css')
    ])
    .then(() => {
      // Initialise the calendar configuration
      this.getAllEvents();
    })
    .catch(error => {
      // eslint-disable-next-line no-console
      console.error({
        message: 'Error occured on FullCalendarJS',
        error
      });
    })
  }

  /**
   * @description Initialise the calendar configuration
   *              This is where we configure the available options for the calendar.
   *              This is also where we load the Events data.
   */
  initialiseFullCalendarJs() {
    const ele = this.template.querySelector('div.fullcalendarjs');
    // eslint-disable-next-line no-undef
    $(ele).fullCalendar({
      header: {
          left: 'prev,next today',
          center: 'title',
          right: 'agendaWeek,month,agendaDay,listWeek'
      },
      themeSystem : 'standard',
      defaultDate: new Date(), 
      navLinks: true,
      editable: false,
      eventLimit: true,
      events: this.allEvents,
      dragScroll : false,
      droppable: false,
      weekNumbers : true,
      displayEventTime: true,
      defaultView: 'agendaWeek',
      minTime: '08:00:00',
      maxTime: '24:00:00',
     columnFormat : "ddd D/M",

      eventClick: function(event) {
			if (event.url) {
				window.open(event.url, "_blank");
				return false;
			}
	    }
    });
  }

  
  getAllEvents(){
    var backColor = '';
      
    fetchAllEvents({ roomtype: this.roomtypeval})
      .then(result => {
	   if(result.length>0){
        this.allEvents = result.map(item => {
          
          return {
            title : item.Subject,
            start : item.StartDateTime,
            end : item.EndDateTime,
            url:  item.Website_URL__c,
            allDay : false,
            description: item.Description,
            textColor: '#FFFFFF',
            //textColor: '#708090',
            backgroundColor: "#"+item.Event_Color_Code__c,
            //color: '#2B547E',
          };
        });				
         // Initialise the calendar configuration
		 if(this.roomtypechange=='true'){
		   const ele = this.template.querySelector('div.fullcalendarjs');
           $(ele).fullCalendar('destroy');
		 }
         this.initialiseFullCalendarJs();
		}else{
			 this.allEvents = [];
			 const ele = this.template.querySelector('div.fullcalendarjs');
             $(ele).fullCalendar('destroy');
			 this.initialiseFullCalendarJs();
		}
				 
      })
      .catch(error => {
        window.console.log(' Error Occured ', error)
      })
      .finally(()=>{
        //this.initialiseFullCalendarJs();
      })
  }

  closeModal(){
    this.selectedEvent = undefined;
  }
}